// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                Int              @id @default(autoincrement())
  name              String           @unique
  book_scan_methods BookScanMethod[] @default([barcode])
  logo              String?
  primary_color     String?          @default("#000000")
  secondary_color   String?          @default("#000000")
  User              User[]
}

model User {
  id               Int            @id @default(autoincrement())
  company          Company        @relation(fields: [company_id], references: [id])
  company_id       Int
  profile_image    String         @default("/default_logo.jpg")
  first_name       String
  second_name      String?
  last_name        String
  second_last_name String?
  date_of_birth    DateTime       @db.Date
  email            String         @unique
  password         String         @db.VarChar(255)
  academic_program String?
  is_admin         Boolean        @default(false)
  phone_token      String         @unique
  is_deleted       Boolean        @default(false)
  deleted_at       DateTime?
  notifications    Notification[]
  Loan             Loan[]
  History          History[]
  Rating           Rating[]
}

model Notification {
  id                 Int                @id @default(autoincrement())
  user               User               @relation(fields: [user_token], references: [phone_token])
  user_token         String
  title              String
  message            String
  status             NotificationStatus @default(unread)
  next_schedule_date DateTime
}

model Loan {
  id                    Int          @id @default(autoincrement())
  user                  User         @relation(fields: [user_id], references: [id])
  user_id               Int
  physical_book         PhysicalBook @relation(fields: [physical_book_barcode], references: [barcode])
  physical_book_barcode String
  start_date            DateTime
  due_date              DateTime
  return_date           DateTime?
  status                LoanStatus   @default(active)
  Fine                  Fine[]
}

model Fine {
  id               Int        @id @default(autoincrement())
  loan             Loan       @relation(fields: [loan_id], references: [id])
  loan_id          Int
  amount           Float      @default(0)
  status           FineStatus @default(unpaid)
  pay_date         DateTime?
  last_update_date DateTime   @default(now())
}

model PhysicalBook {
  id                Int        @id @default(autoincrement())
  serial_number     String
  barcode           String     @unique
  reference_book    Book       @relation(fields: [reference_id], references: [id])
  reference_id      Int
  collection        Reference  @relation(fields: [collection_id], references: [id])
  collection_id     Int
  author            String
  book_cover        String     @default("/no_cover.jpg")
  title             String
  edition           String?
  dewey_code        String
  creation_date     DateTime
  isbn              String?
  isbn13            String?
  publisher         String?
  publish_date      DateTime?
  language          String?
  status            BookStatus @default(available)
  bibliographic_gps String?    @unique
  Loan              Loan[]
  Rating            Rating[]
}

model Rating {
  id                    Int          @id @default(autoincrement())
  rating                Float
  phyiscal_book         PhysicalBook @relation(fields: [physical_book_barcode], references: [barcode])
  physical_book_barcode String
  user                  User         @relation(fields: [user_id], references: [id])
  user_id               Int
  email                 String
  created_at            DateTime?     @default(now())
}

model Reference {
  id                      Int            @id @default(autoincrement())
  reference_name          String         @unique
  limit_of_books_per_user Int
  amount_of_days_per_loan Int
  amount_of_money_per_day Float
  Book                    Book[]
  PhysicalBook            PhysicalBook[]
}

model Subject {
  id           Int            @id @default(autoincrement())
  subject_name String         @unique
  Subject_Book Subject_Book[]
}

model Subject_Book {
  id         Int     @id @default(autoincrement())
  subject    Subject @relation(fields: [subject_id], references: [id])
  subject_id Int
  book       Book    @relation(fields: [book_id], references: [id])
  book_id    Int
}

model Book {
  id             Int            @id @default(autoincrement())
  reference      Reference      @relation(fields: [reference_id], references: [id])
  reference_id   Int
  author         String
  original_title String?
  publish_date   DateTime?      @db.Date
  PhysicalBook   PhysicalBook[]
  Subject_Book   Subject_Book[]
}

model Inventory {
  id                          Int      @id @default(autoincrement())
  physical_book_serial_number String
  creation_date               DateTime @default(now())
  last_update                 DateTime @default(now())
  quantity                    Int
  minimum_quantity            Int      @default(0)
  maximum_quantity            Int
  reorder_quantity            Int?
}

model History {
  id         Int           @id @default(autoincrement())
  model_name String
  model_id   Int
  action     HistoryAction
  user       User          @relation(fields: [user_id], references: [id])
  user_id    Int
  date       DateTime      @default(now())
  data       String?
}

enum HistoryAction {
  create
  update
  delete
}

enum NotificationStatus {
  unread
  read
  deleted
}

enum LoanStatus {
  active
  returned
  overdue
}

enum FineStatus {
  paid
  unpaid
}

enum BookStatus {
  available
  unavailable
}

enum BookScanMethod {
  barcode
  rfid
}
